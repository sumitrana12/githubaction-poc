name: DevSecOps Pipeline

on:
  push:
    branches: [ main, dev, stage ]
  pull_request:
    branches: [ main, dev, stage ]
  workflow_dispatch:  # Allows manual trigger
    inputs:
      job_to_run:
        description: 'Which job to run (leave empty to run all jobs)'
        required: false
        type: choice
        options:
          - ''
          - validate-and-test
          - build-scan-and-push
          - deploy
          - security-audit
          - post-deployment
      run_dependencies:
        description: 'Run dependencies of selected job'
        required: false
        type: boolean
        default: false

jobs:
  validate-and-test:
    name: Validate and Test
    runs-on: ubuntu-latest
    # Run this job if no specific job is selected, or if this job is selected, or if dependencies are required
    if: ${{ github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'validate-and-test' || (github.event.inputs.job_to_run == 'build-scan-and-push' && github.event.inputs.run_dependencies == 'true') }}
    # Dynamically set environment based on branch
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        
    - name: Run linting
      run: |
        echo "üîç Starting Python linting check..."
        
        # Run flake8 and capture both output and exit code
        flake8_output=$(flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics) || flake8_exit=$?
        
        # Print output regardless
        if [ -n "$flake8_output" ]; then
          echo "$flake8_output"
        fi
        
        # Check for errors
        if [ "${flake8_exit:-0}" -ne 0 ]; then
          echo "‚ùå Linting failed with critical errors!"
          echo "   E9: Syntax errors"
          echo "   F63: Assertion issues"
          echo "   F7: Error-prone control flow"
          echo "   F82: Undefined variables"
          exit $flake8_exit
        else
          echo "‚úÖ Linting passed! No critical errors found."
          echo "   Note: This check only looks for critical errors."
          echo "   For a full lint check, consider running flake8 without filters."
        fi
        
    - name: SAST - Bandit Scan
      run: |
        # Run bandit and capture output and exit code
        bandit_output=$(bandit -r src -x src/tests -f json)
        bandit_exit_code=$?
        
        # Print output for logging
        echo "$bandit_output" | python -m json.tool
        
        # Count high and medium severity issues
        high_issues=$(echo "$bandit_output" | python -c "import sys, json; data = json.load(sys.stdin); print(sum(1 for issue in data['results'] if issue['issue_severity'] == 'HIGH'))")
        medium_issues=$(echo "$bandit_output" | python -c "import sys, json; data = json.load(sys.stdin); print(sum(1 for issue in data['results'] if issue['issue_severity'] == 'MEDIUM'))")
        
        echo "High severity issues: $high_issues"
        echo "Medium severity issues: $medium_issues"
        
        # Determine if we should fail
        if [ "$high_issues" -gt 0 ]; then
          echo "Failing build due to $high_issues high severity issues"
          exit 1
        elif [ "$medium_issues" -gt 5 ]; then
          echo "Failing build due to $medium_issues medium severity issues (threshold: 5)"
          exit 1
        else
          echo "Security scan passed: $high_issues high severity issues, $medium_issues medium severity issues"
          exit 0
        fi
        
    - name: Dependency Scan
      run: |
        echo "üîç Scanning dependencies for vulnerabilities..."
        
        # Create a safety configuration file to set failure thresholds
        cat > .safety-policy.yml << EOF
        security:
          ignore-cvss-severity-below: 7  # Only fail on high severity (CVSS >= 7.0)
          ignore-vulnerabilities:
            # Ignore specific vulnerabilities if needed
            # "64484": "PVE-2024-64484"  # Example format
        EOF
        
        # Run safety check with custom policy
        safety_output=$(safety check -r src/requirements.txt --policy-file .safety-policy.yml --json) || safety_exit=$?
        
        # Parse the output to show a summary
        vuln_count=$(echo $safety_output | python -c "import sys, json; data=json.loads(sys.stdin.read()); print(len(data.get('vulnerabilities', [])))")
        critical_count=$(echo $safety_output | python -c "import sys, json; data=json.loads(sys.stdin.read()); print(sum(1 for v in data.get('vulnerabilities', []) if v.get('severity', '').lower() == 'critical'))")
        high_count=$(echo $safety_output | python -c "import sys, json; data=json.loads(sys.stdin.read()); print(sum(1 for v in data.get('vulnerabilities', []) if v.get('severity', '').lower() == 'high'))")
        
        # Print human-readable output
        echo "$safety_output" | python -m json.tool
        echo "--------------------------------"
        echo "Total vulnerabilities found: $vuln_count"
        echo "Critical vulnerabilities: $critical_count"
        echo "High vulnerabilities: $high_count"
        
        # Determine if we should fail based on our policy
        if [ "${safety_exit:-0}" -ne 0 ] && [ "$critical_count" -gt 0 -o "$high_count" -gt 0 ]; then
          echo "‚ùå Security scan failed due to high severity vulnerabilities!"
          exit 1
        else
          echo "‚úÖ Security scan passed based on severity threshold!"
          echo "   Note: Lower severity vulnerabilities might still exist"
          exit 0
        fi
        
    - name: Run tests
      run: |
        echo "üîç Running pytest with coverage..."
        cd src
        python -m pytest tests/ --cov=. --cov-report=xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: src/coverage.xml
        
    - name: Upload codebase for next steps
      uses: actions/upload-artifact@v4
      with:
        name: codebase
        path: |
          src/
          Dockerfile
          .dockerignore
          
  build-scan-and-push:
    name: Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    # Run this job if no specific job is selected, or if this job is selected, or if dependencies are required
    if: ${{ github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'build-scan-and-push' || (contains('deploy security-audit post-deployment', github.event.inputs.job_to_run) && github.event.inputs.run_dependencies == 'true') }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    needs: [validate-and-test]
    
    steps:
    - name: Download codebase
      uses: actions/download-artifact@v4
      with:
        name: codebase
    
    - name: Set environment variables
      id: vars
      run: |
        # Extract branch name from GITHUB_REF
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        
        # Set image tag based on branch
        if [ "$BRANCH" = "main" ]; then
          echo "IMAGE_TAG=prod" >> $GITHUB_ENV
        elif [ "$BRANCH" = "stage" ]; then
          echo "IMAGE_TAG=staging" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=dev" >> $GITHUB_ENV
        fi
        
        # Add timestamp for versioned tags
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: flask-message-board:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-message-board:test'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities
        severity: 'CRITICAL,HIGH'
        
    - name: Tag and push Docker image
      run: |
        echo "üîç Tagging and pushing Docker image..."
        # Tag the locally built image with the timestamp tag only
        docker tag flask-message-board:test sumitrana/flask-message-board:${{ env.IMAGE_TAG }}-${{ env.TIMESTAMP }}
        
        # Push only the timestamped image
        docker push sumitrana/flask-message-board:${{ env.IMAGE_TAG }}-${{ env.TIMESTAMP }}
        
        echo "‚úÖ Successfully pushed image:"
        echo "   sumitrana/flask-message-board:${{ env.IMAGE_TAG }}-${{ env.TIMESTAMP }}"
          
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    # Run this job if no specific job is selected, or if this job is selected, or if dependencies are required
    if: ${{ github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'deploy' || (contains('security-audit post-deployment', github.event.inputs.job_to_run) && github.event.inputs.run_dependencies == 'true') }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    needs: [build-scan-and-push]
    
    steps:
    - name: Set environment variables
      id: vars
      run: |
        # Extract branch name from GITHUB_REF
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        
        # Set environment name based on branch
        if [ "$BRANCH" = "main" ]; then
          echo "ENV_NAME=production" >> $GITHUB_ENV
          echo "IMAGE_TAG=prod" >> $GITHUB_ENV
        elif [ "$BRANCH" = "stage" ]; then
          echo "ENV_NAME=staging" >> $GITHUB_ENV
          echo "IMAGE_TAG=staging" >> $GITHUB_ENV
        else
          echo "ENV_NAME=development" >> $GITHUB_ENV
          echo "IMAGE_TAG=dev" >> $GITHUB_ENV
        fi
        
        # Add timestamp for reference
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        
    - name: Deploy notification
      run: |
        echo "Deploying to ${{ env.ENV_NAME }} environment"
        echo "Image: sumitrana/flask-message-board:${{ env.IMAGE_TAG }}-${{ env.TIMESTAMP }}"
        # In a real scenario, you would add actual deployment steps here
        # For example, using kubectl or helm to deploy to a Kubernetes cluster
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    # Run this job if no specific job is selected, or if this job is selected, or if dependencies are required
    if: ${{ github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'security-audit' || (github.event.inputs.job_to_run == 'post-deployment' && github.event.inputs.run_dependencies == 'true') }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    needs: [deploy]
    
    steps:
    - name: DAST Simulation
      run: |
        echo "Simulating Dynamic Application Security Testing"
        echo "Would typically use tools like OWASP ZAP here"
        
    - name: Security Compliance Check
      run: |
        echo "Simulating security compliance checks"
        echo "Would check for SOC2, GDPR, HIPAA compliance as needed"
        
  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    # Run this job if no specific job is selected, or if this job is selected
    if: ${{ github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'post-deployment' }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    needs: [security-audit]
    
    steps:
    - name: Set environment variables
      id: vars
      run: |
        # Extract branch name from GITHUB_REF
        BRANCH=${GITHUB_REF#refs/heads/}
        
        # Set environment name based on branch
        if [ "$BRANCH" = "main" ]; then
          echo "ENV_NAME=production" >> $GITHUB_ENV
        elif [ "$BRANCH" = "stage" ]; then
          echo "ENV_NAME=staging" >> $GITHUB_ENV
        else
          echo "ENV_NAME=development" >> $GITHUB_ENV
        fi
    
    - name: Smoke Test
      run: |
        echo "Running ${{ env.ENV_NAME }} smoke tests"
        # Would typically make requests to verify deployment
        
    - name: Notify Team
      run: |
        echo "Notification sent: Deployment to ${{ env.ENV_NAME }} completed"
        # Would typically integrate with Slack, Teams, email, etc. 